services:
  app:
    build:
      context: .
      dockerfile: ./docker/php/Dockerfile
    container_name: fuelphp-app
    volumes:
      - ./docker/php/php.ini:/usr/local/etc/php/php.ini
      - ./src:/var/www/html
    working_dir: /var/www/html
    depends_on:
      - db
      - redis
      - minio
    networks:
      - app-network

  web:
    image: nginx:alpine
    container_name: fuelphp-web
    ports:
      - "80:80"
    volumes:
      - ./src:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
    - app-network

  db:
    image: mysql:8.0
    container_name: fuelphp-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ROOT_HOST: '%'
      MYSQL_DATABASE: '${DB_DATABASE}'
      MYSQL_USER: '${DB_USERNAME}'
      MYSQL_PASSWORD: '${DB_PASSWORD}'
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
    ports:
      - "3306:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - app-network

  adminer:
    image: adminer
    container_name: fuelphp_adminer
    restart: always
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    networks:
      - app-network

  redis:
    image: 'redis:alpine'
    container_name: fuelphp-redis
    ports:
      - '${FORWARD_REDIS_PORT:-6379}:6379'
    volumes:
      - 'redis_data:/data'
    healthcheck:
      test:
        - CMD
        - redis-cli
        - ping
    networks:
    - app-network

  worker:
    extends:
      service: app
    container_name: fuelphp-worker
    command: php oil refine queue
    depends_on:
      - app
    networks:
      - app-network

  mailpit:
    image: axllent/mailpit
    container_name: fuelphp-mailpit
    ports:
      - "8025:8025"
      - "1025:1025"
    restart: unless-stopped
    networks:
      - app-network

  minio:
    image: minio/minio:latest
    container_name: fuelphp-minio
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY}
    ports:
      - '${FORWARD_MINIO_PORT:-9000}:9000'
      - '${FORWARD_MINIO_CONSOLE_PORT:-9002}:9002'
    volumes:
      - miniodata:/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    entrypoint: >
      /bin/sh -c "
      minio server /data --address ':9000' --console-address ':9002' &

      echo 'ðŸ•’ Waiting for MinIO to be ready...' ;
      until curl -s http://localhost:9000/minio/health/ready > /dev/null; do
        sleep 1;
      done ;
      echo 'âœ… MinIO is ready!' ;

      mc alias set local http://localhost:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} &&
      mc mb -p local/${AWS_BUCKET} || echo 'Bucket already exists' &&
      mc anonymous set public local/${AWS_BUCKET} &&
      echo 'âœ… Public bucket ready: ${AWS_BUCKET}' ;

      wait
      "

networks:
  app-network:
    driver: bridge

volumes:
  db_data:
  redis_data:
  miniodata:
